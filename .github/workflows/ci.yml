name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret scanning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff bandit[toml] safety pyright

      - name: Run Ruff (linting)
        run: ruff check . --output-format=github

      - name: Run Ruff (formatting)
        run: ruff format --check .

      - name: Security scan with Bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Check dependencies for vulnerabilities
        run: safety check --json --output safety-report.json || true

      - name: Download gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Run gitleaks secret scan
        run: |
          gitleaks detect --no-git -s . --exit-code 1 || echo "Gitleaks scan completed"

      - name: Basic secret pattern check
        run: |
          ! grep -R "OPENAI_API_KEY=" -n . --exclude-dir=.git || (echo "Potential secret pattern found" && exit 1)

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -n auto

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test CLI functionality
        run: |
          python cli.py --help
          echo "Testing basic CLI execution" | python cli.py --goal 0.5 --threat 0.3 --pretty

      - name: Test configuration loading
        run: |
          python -c "from emota.unity import EMOTAUnityEngine; engine = EMOTAUnityEngine(); print('Config loaded successfully')"

      - name: Test OpenAI client configuration (without API key)
        run: |
          python -c "import openai_connect; print('OpenAI module imported successfully')"

  build-docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate documentation structure
        run: |
          # Check that key documentation files exist and have content
          test -s README.md
          test -s COPILOT_AGENT.md
          test -s CONTRIBUTING.md
          test -s SECURITY.md
          echo "All documentation files present and non-empty"

      - name: Check schema validation
        run: |
          python -c "
          import json, jsonschema
          schema_file = 'schema/cli_output.schema.json'
          with open(schema_file) as f:
              schema = json.load(f)
          jsonschema.Draft7Validator.check_schema(schema)
          print('Schema validation passed')
          "
